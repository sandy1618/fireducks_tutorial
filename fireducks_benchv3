{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8623693,"sourceType":"datasetVersion","datasetId":5162654}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install fireducks polars","metadata":{"execution":{"iopub.status.busy":"2024-09-02T11:56:03.842912Z","iopub.execute_input":"2024-09-02T11:56:03.843865Z","iopub.status.idle":"2024-09-02T11:56:40.310115Z","shell.execute_reply.started":"2024-09-02T11:56:03.843827Z","shell.execute_reply":"2024-09-02T11:56:40.308870Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting fireducks\n  Downloading fireducks-1.0.2-cp310-cp310-manylinux_2_28_x86_64.whl.metadata (1.2 kB)\nRequirement already satisfied: polars in /opt/conda/lib/python3.10/site-packages (1.1.0)\nCollecting firefw==1.0.2 (from fireducks)\n  Downloading firefw-1.0.2-py3-none-any.whl.metadata (767 bytes)\nRequirement already satisfied: numba in /opt/conda/lib/python3.10/site-packages (from fireducks) (0.58.1)\nRequirement already satisfied: pandas<2.3.0,>=1.5.3 in /opt/conda/lib/python3.10/site-packages (from fireducks) (2.2.2)\nCollecting pyarrow<17.1,>=17.0 (from fireducks)\n  Downloading pyarrow-17.0.0-cp310-cp310-manylinux_2_28_x86_64.whl.metadata (3.3 kB)\nRequirement already satisfied: numpy>=1.22.4 in /opt/conda/lib/python3.10/site-packages (from pandas<2.3.0,>=1.5.3->fireducks) (1.26.4)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas<2.3.0,>=1.5.3->fireducks) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas<2.3.0,>=1.5.3->fireducks) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas<2.3.0,>=1.5.3->fireducks) (2023.4)\nRequirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /opt/conda/lib/python3.10/site-packages (from numba->fireducks) (0.41.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas<2.3.0,>=1.5.3->fireducks) (1.16.0)\nDownloading fireducks-1.0.2-cp310-cp310-manylinux_2_28_x86_64.whl (6.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.8/6.8 MB\u001b[0m \u001b[31m1.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m0m\n\u001b[?25hDownloading firefw-1.0.2-py3-none-any.whl (12 kB)\nDownloading pyarrow-17.0.0-cp310-cp310-manylinux_2_28_x86_64.whl (39.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m39.9/39.9 MB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: pyarrow, firefw, fireducks\n  Attempting uninstall: pyarrow\n    Found existing installation: pyarrow 16.1.0\n    Uninstalling pyarrow-16.1.0:\n      Successfully uninstalled pyarrow-16.1.0\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\napache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\napache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.26.4 which is incompatible.\napache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 17.0.0 which is incompatible.\nbeatrix-jupyterlab 2023.128.151533 requires jupyterlab~=3.6.0, but you have jupyterlab 4.2.3 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed fireducks-1.0.2 firefw-1.0.2 pyarrow-17.0.0\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport time\n\n# disabling lazy-execution mode of FireDucks\nos.environ[\"FIREDUCKS_FLAGS\"] =\"--benchmark-mode\"\n\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-02T11:56:40.312540Z","iopub.execute_input":"2024-09-02T11:56:40.312943Z","iopub.status.idle":"2024-09-02T11:56:40.323464Z","shell.execute_reply.started":"2024-09-02T11:56:40.312907Z","shell.execute_reply":"2024-09-02T11:56:40.322441Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/zvuk-dataset/zvuk-interactions.parquet\n/kaggle/input/zvuk-dataset/zvuk-track_artist_embedding.parquet\n","output_type":"stream"}]},{"cell_type":"code","source":"results = {}\npath = \"/kaggle/input/zvuk-dataset/zvuk-interactions.parquet\"\n\ndef append(lib, *args):\n    results[lib] = list(args)\n    \n    \ndef bench_polars():\n    stime = time.time()\n    df = pl.read_parquet(path, columns=[\"datetime\", \"play_duration\", \"user_id\"])\n    load_t = time.time() - stime\n\n    stime = time.time()\n    no_na = df.drop_nulls()\n    dropna_t = time.time() - stime\n\n    stime = time.time()\n    fdf = df.filter((pl.col('play_duration') > 0) & (pl.col('play_duration') < 1000))\n    filter_t = time.time() - stime\n    \n    stime = time.time()\n    desc = df['play_duration'].describe()\n    desc_t = time.time() - stime\n\n    stime = time.time()\n    sdf = df['user_id'].value_counts(sort=True)\n    vcount_t = time.time() - stime    \n     \n    stime = time.time()\n    hour_wise_mean = (\n        df.with_columns(\n            pl.col(\"datetime\").dt.hour().alias(\"hour\"),\n        )\n        .group_by(\"hour\").agg(pl.col(\"play_duration\").mean())\n    )\n    group_agg_t = time.time() - stime\n    \n    # query combining groupby and sort to find top-10 users based on play_duration\n    stime = time.time()\n    user_wise_mean = (\n        df.group_by(\"user_id\").agg(pl.col(\"play_duration\").mean()).sort(\"play_duration\", descending=True).head(10)\n    )\n    top10_user_t = time.time() - stime\n\n    append(\"polars\", load_t, dropna_t, filter_t, desc_t, vcount_t, group_agg_t, top10_user_t)\n    print(\n        f\"[polars] load-time: {load_t} sec; dropna-time: {dropna_t} sec; \"\n        f\"filter-time: {filter_t} sec; describe-time: {desc_t} sec; \"\n        f\"value-count-time: {vcount_t} sec; \"\n        f\"group-agg-time: {group_agg_t} sec; top10-user-time: {top10_user_t} sec\"\n    )\n\n\ndef bench_others(pd):\n    stime = time.time()\n    df = pd.read_parquet(path, columns=[\"datetime\", \"play_duration\", \"user_id\"])\n    load_t = time.time() - stime\n\n    stime = time.time()\n    no_na = df.dropna()\n    dropna_t = time.time() - stime\n    \n    stime = time.time()\n    fdf = df[(df['play_duration'] > 0) & (df['play_duration'] < 1000)]\n    filter_t = time.time() - stime\n\n    stime = time.time()\n    desc = df['play_duration'].describe()\n    desc_t = time.time() - stime \n    \n    stime = time.time()\n    sdf = df['user_id'].value_counts(sort=True)\n    vcount_t = time.time() - stime\n\n    stime = time.time()\n    hour_wise_mean = (\n        df.assign(hour=lambda df: df[\"datetime\"].dt.hour).groupby(\"hour\")[\"play_duration\"].mean()\n    )\n    group_agg_t = time.time() - stime\n    \n    # query combining groupby and sort to find top-10 users based on play_duration\n    stime = time.time()\n    user_wise_mean = (\n        df.groupby(\"user_id\")[\"play_duration\"].mean().sort_values(ascending=False).head(10)\n    )\n    top10_user_t = time.time() - stime\n    \n    lib = pd.__name__\n    append(lib, load_t, dropna_t, filter_t, desc_t, vcount_t, group_agg_t, top10_user_t)\n    print(\n        f\"[{lib}] load-time: {load_t} sec; dropna-time: {dropna_t} sec; \"\n        f\"filter-time: {filter_t} sec; desctibe-time: {desc_t} sec; \"\n        f\"value-counts-time: {vcount_t} sec; \"\n        f\"group-agg-time: {group_agg_t} sec; top10-user-time: {top10_user_t} sec\"\n    )","metadata":{"execution":{"iopub.status.busy":"2024-09-02T11:56:40.325178Z","iopub.execute_input":"2024-09-02T11:56:40.325899Z","iopub.status.idle":"2024-09-02T11:56:40.347374Z","shell.execute_reply.started":"2024-09-02T11:56:40.325858Z","shell.execute_reply":"2024-09-02T11:56:40.346317Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport fireducks.pandas as fd\nimport polars as pl","metadata":{"execution":{"iopub.status.busy":"2024-09-02T11:56:40.348751Z","iopub.execute_input":"2024-09-02T11:56:40.349176Z","iopub.status.idle":"2024-09-02T11:56:41.130609Z","shell.execute_reply.started":"2024-09-02T11:56:40.349138Z","shell.execute_reply":"2024-09-02T11:56:41.129606Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import platform, psutil\nimport fireducks\n\nprint(\"=\"*30, \"Evaluation Environment Information\", \"=\"*30)\nprint(f'platform: {platform.system()}')\nprint(f'architecture: {platform.machine()}')\nprint(f'processor: {platform.processor()}')\nprint(f'cpu: {psutil.cpu_count()}')\nprint(f'ram: {str(round(psutil.virtual_memory().total / (1024 ** 3)))} GB')\nprint(f'pandas-version: {pd.__version__}')\nprint(f'fireducks-version: {fireducks.__version__}')\nprint(f'polars-version: {pl.__version__}')","metadata":{"execution":{"iopub.status.busy":"2024-09-02T11:56:41.133003Z","iopub.execute_input":"2024-09-02T11:56:41.133474Z","iopub.status.idle":"2024-09-02T11:56:41.141465Z","shell.execute_reply.started":"2024-09-02T11:56:41.133442Z","shell.execute_reply":"2024-09-02T11:56:41.140403Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"============================== Evaluation Environment Information ==============================\nplatform: Linux\narchitecture: x86_64\nprocessor: x86_64\ncpu: 4\nram: 31 GB\npandas-version: 2.2.2\nfireducks-version: 1.0.2\npolars-version: 1.1.0\n","output_type":"stream"}]},{"cell_type":"code","source":"import gc\n\n# pandas and FireDucks share same APIs, hence same benchmark code can be used for both\nfor mod in [pd, fd]: \n    bench_others(mod)\n    gc.collect()\n    \n# polars APIs are different, hence need to separate it out    \nbench_polars()\ngc.collect(); ","metadata":{"execution":{"iopub.status.busy":"2024-09-02T11:56:41.142599Z","iopub.execute_input":"2024-09-02T11:56:41.142950Z","iopub.status.idle":"2024-09-02T11:58:57.382656Z","shell.execute_reply.started":"2024-09-02T11:56:41.142913Z","shell.execute_reply":"2024-09-02T11:58:57.381425Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"[pandas] load-time: 20.010117769241333 sec; dropna-time: 3.354825019836426 sec; filter-time: 10.131295919418335 sec; desctibe-time: 8.562106847763062 sec; value-counts-time: 2.512389898300171 sec; group-agg-time: 13.8267343044281 sec; top10-user-time: 7.717848300933838 sec\n[fireducks.pandas] load-time: 5.209326267242432 sec; dropna-time: 0.002067089080810547 sec; filter-time: 2.605330228805542 sec; desctibe-time: 9.339109897613525 sec; value-counts-time: 4.479948043823242 sec; group-agg-time: 2.9243152141571045 sec; top10-user-time: 2.189168691635132 sec\n[polars] load-time: 6.6657936573028564 sec; dropna-time: 0.05326342582702637 sec; filter-time: 2.6718058586120605 sec; describe-time: 9.080830812454224 sec; value-count-time: 9.085116386413574 sec; group-agg-time: 6.786203145980835 sec; top10-user-time: 8.025367021560669 sec\n","output_type":"stream"}]},{"cell_type":"code","source":"results = pd.DataFrame.from_dict(results)\nresults.index = [\"load-time\", \"dropna-time\", \"filter-time\", \"describe-time\", \"value-count-time\", \"groupby-agg-time\", \"top10-user-time\"]\nresults = round(results, 4)\nresults","metadata":{"execution":{"iopub.status.busy":"2024-09-02T11:58:57.384339Z","iopub.execute_input":"2024-09-02T11:58:57.384774Z","iopub.status.idle":"2024-09-02T11:58:57.405820Z","shell.execute_reply.started":"2024-09-02T11:58:57.384734Z","shell.execute_reply":"2024-09-02T11:58:57.404674Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"                   pandas  fireducks.pandas  polars\nload-time         20.0101            5.2093  6.6658\ndropna-time        3.3548            0.0021  0.0533\nfilter-time       10.1313            2.6053  2.6718\ndescribe-time      8.5621            9.3391  9.0808\nvalue-count-time   2.5124            4.4799  9.0851\ngroupby-agg-time  13.8267            2.9243  6.7862\ntop10-user-time    7.7178            2.1892  8.0254","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pandas</th>\n      <th>fireducks.pandas</th>\n      <th>polars</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>load-time</th>\n      <td>20.0101</td>\n      <td>5.2093</td>\n      <td>6.6658</td>\n    </tr>\n    <tr>\n      <th>dropna-time</th>\n      <td>3.3548</td>\n      <td>0.0021</td>\n      <td>0.0533</td>\n    </tr>\n    <tr>\n      <th>filter-time</th>\n      <td>10.1313</td>\n      <td>2.6053</td>\n      <td>2.6718</td>\n    </tr>\n    <tr>\n      <th>describe-time</th>\n      <td>8.5621</td>\n      <td>9.3391</td>\n      <td>9.0808</td>\n    </tr>\n    <tr>\n      <th>value-count-time</th>\n      <td>2.5124</td>\n      <td>4.4799</td>\n      <td>9.0851</td>\n    </tr>\n    <tr>\n      <th>groupby-agg-time</th>\n      <td>13.8267</td>\n      <td>2.9243</td>\n      <td>6.7862</td>\n    </tr>\n    <tr>\n      <th>top10-user-time</th>\n      <td>7.7178</td>\n      <td>2.1892</td>\n      <td>8.0254</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]}]}